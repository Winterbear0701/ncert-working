# Generated by Django 4.2.11 on 2025-10-21 04:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('students', '0005_questionvariant_quizanswer_quizattempt_quizchapter_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='UnitTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('total_marks', models.IntegerField(default=100)),
                ('duration_minutes', models.IntegerField(default=60)),
                ('passing_marks', models.IntegerField(default=40)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chapters', models.ManyToManyField(related_name='unit_tests', to='students.quizchapter')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='quizattempt',
            name='feedback_message',
            field=models.TextField(blank=True, help_text='AI-generated feedback on topic performance', null=True),
        ),
        migrations.CreateModel(
            name='UnitTestQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_number', models.IntegerField()),
                ('question_text', models.TextField()),
                ('marks', models.IntegerField(default=10)),
                ('model_answer', models.TextField(help_text='Expected answer from students')),
                ('key_points', models.JSONField(blank=True, help_text='Key points that should be in answer', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('unit_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='students.unittest')),
            ],
            options={
                'ordering': ['unit_test', 'question_number'],
                'unique_together': {('unit_test', 'question_number')},
            },
        ),
        migrations.CreateModel(
            name='UnitTestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attempt_number', models.IntegerField(default=1)),
                ('total_marks_obtained', models.FloatField(default=0)),
                ('content_score', models.FloatField(default=0, help_text='Score based on content match')),
                ('grammar_score', models.FloatField(default=0, help_text='Score based on grammar quality')),
                ('overall_score', models.FloatField(default=0, help_text='Combined final score')),
                ('topic_performance', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(choices=[('in_progress', 'In Progress'), ('submitted', 'Submitted'), ('evaluated', 'Evaluated')], default='in_progress', max_length=20)),
                ('overall_feedback', models.TextField(blank=True, null=True)),
                ('strengths', models.TextField(blank=True, null=True)),
                ('improvements', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('evaluated_at', models.DateTimeField(blank=True, null=True)),
                ('time_taken_seconds', models.IntegerField(default=0)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_test_attempts', to=settings.AUTH_USER_MODEL)),
                ('unit_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='students.unittest')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='UnitTestAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_text', models.TextField()),
                ('content_score', models.FloatField(default=0, help_text='How well content matches model answer')),
                ('grammar_score', models.FloatField(default=0, help_text='Grammar and language quality')),
                ('marks_obtained', models.FloatField(default=0)),
                ('content_feedback', models.TextField(blank=True, null=True)),
                ('grammar_feedback', models.TextField(blank=True, null=True)),
                ('overall_feedback', models.TextField(blank=True, null=True)),
                ('key_points_covered', models.JSONField(blank=True, null=True)),
                ('key_points_missed', models.JSONField(blank=True, null=True)),
                ('evaluated_at', models.DateTimeField(blank=True, null=True)),
                ('evaluation_model', models.CharField(default='gemini', max_length=50)),
                ('answered_at', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='students.unittestattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='students.unittestquestion')),
            ],
            options={
                'ordering': ['attempt', 'question__question_number'],
            },
        ),
        migrations.AddIndex(
            model_name='unittestattempt',
            index=models.Index(fields=['student', 'unit_test', '-started_at'], name='students_un_student_4e9a23_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='unittestanswer',
            unique_together={('attempt', 'question')},
        ),
        migrations.AddIndex(
            model_name='unittest',
            index=models.Index(fields=['is_active', 'created_at'], name='students_un_is_acti_495a6d_idx'),
        ),
    ]
